apiVersion: cluster.open-cluster-management.io/v1beta1
kind: Placement
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
  labels:
    open-cluster-management.io/policy-set: opp
  name: placement-opp-clusters
  namespace: policies
spec:
  predicates:
  - requiredClusterSelector:
      labelSelector:
        matchExpressions:
        - key: vendor
          operator: In
          values:
          - OpenShift
        - key: local-cluster
          operator: NotIn
          values:
          - "true"
---
apiVersion: cluster.open-cluster-management.io/v1beta1
kind: Placement
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
  labels:
    open-cluster-management.io/policy-set: opp
  name: placement-opp-hub
  namespace: policies
spec:
  predicates:
  - requiredClusterSelector:
      labelSelector:
        matchExpressions:
        - key: local-cluster
          operator: In
          values:
          - "true"
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
  labels:
    open-cluster-management.io/policy-set: opp
  name: binding-policy-opp-hub
  namespace: policies
placementRef:
  apiGroup: cluster.open-cluster-management.io
  kind: Placement
  name: placement-opp-clusters
subjects:
- apiGroup: policy.open-cluster-management.io
  kind: PolicySet
  name: opp-clusters
---
apiVersion: policy.open-cluster-management.io/v1
kind: PlacementBinding
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
  labels:
    open-cluster-management.io/policy-set: opp
  name: binding-policy-opp-hub2
  namespace: policies
placementRef:
  apiGroup: cluster.open-cluster-management.io
  kind: Placement
  name: placement-opp-hub
subjects:
- apiGroup: policy.open-cluster-management.io
  kind: PolicySet
  name: opp-hub
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: SI System and Information Integrity
    policy.open-cluster-management.io/controls: SI-5 Security Alerts Advisories and
      Directives
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-acs-central-ca-bundle
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-acs-central-status
    namespace: policies
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-ca-bundle
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: stackrox
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-ca-bundle2
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              annotations:
                argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
              name: create-cluster-init
              namespace: stackrox
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-ca-bundle3
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: Role
            metadata:
              annotations:
                argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
                argocd.argoproj.io/sync-wave: "1"
              name: create-cluster-init
              namespace: stackrox
            rules:
            - apiGroups:
              - ""
              resources:
              - secrets
              verbs:
              - get
              - list
              - create
              - patch
              - update
            - apiGroups:
              - platform.stackrox.io
              resources:
              - securedclusters
              verbs:
              - get
              - list
              - patch
              - update
            - apiGroups:
              - route.openshift.io
              resources:
              - routes
              verbs:
              - get
              - list
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-ca-bundle4
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              annotations:
                argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
              name: create-cluster-init
              namespace: stackrox
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: Role
              name: create-cluster-init
            subjects:
            - kind: ServiceAccount
              name: create-cluster-init
              namespace: stackrox
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-ca-bundle5
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: batch/v1
            kind: Job
            metadata:
              annotations:
                argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
                argocd.argoproj.io/sync-wave: "2"
              labels:
                init-bundle: central
              name: create-cluster-init-bundle-v2
              namespace: stackrox
            spec:
              template:
                metadata:
                  annotations:
                    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
                  labels:
                    init-bundle: central
                spec:
                  containers:
                  - command:
                    - /bin/bash
                    - -c
                    - "#!/usr/bin/env bash\nif kubectl get secret/sensor-tls &> /dev/null;
                      then\n  echo \"cluster-init bundle has already been configured,
                      doing nothing\"\n  exit 0\nelse\n\n  # Wait for central to be
                      ready\n  attempt_counter=0\n  max_attempts=20\n  echo \"Waiting
                      for central to be available...\"\n  until $(curl -k --output
                      /dev/null --silent --head --fail https://central); do\n      if
                      [ ${attempt_counter} -eq ${max_attempts} ];then\n        echo
                      \"Max attempts reached\"\n        exit 1\n      fi\n\n      printf
                      '.'\n      attempt_counter=$(($attempt_counter+1))\n      echo
                      \"Made attempt $attempt_counter, waiting...\"\n      sleep 5\n
                      \ done\n\n  # attempt to create init-bundle\n  # on failure
                      attempt to delete the bundle\n  attempt_counter=0\n  max_attempts=5\n
                      \ echo \"Configuring cluster-init bundle\"\n  \n  # set the
                      bundle name to include todays date\n  bundle_name=local-cluster-$(date
                      '+%Y%m%d')\n  export DATA={\\\"name\\\":\\\"$bundle_name\\\"}\n
                      \ until (curl -k -o /tmp/bundle.json -X POST -u \"admin:$PASSWORD\"
                      -H \"Content-Type: application/json\" --data $DATA --fail https://central/v1/cluster-init/init-bundles);
                      do\n      if [ ${attempt_counter} -eq ${max_attempts} ];then\n
                      \       echo \"Max attempts to create bundle reached\"\n        exit
                      1\n      fi\n\n      echo \"Check to see if there is an existing
                      bundle that can be revoked\"\n      curl -o /tmp/find_bundle.json
                      \ -k -X GET -u \"admin:$PASSWORD\" -H \"Content-Type: application/json\"
                      https://central/v1/cluster-init/init-bundles\n      bundle_id=$(cat
                      /tmp/find_bundle.json | python -c \"import sys, json; result
                      = [x for x in json.load(sys.stdin)[\\\"items\\\"] if x[\\\"name\\\"]==\\\"$bundle_name\\\"];
                      print(result[0][\\\"id\\\"])\")\n\n      echo \"-------------------------\"\n
                      \     echo \"bundle name is $bundle_name bundle id $bundle_id\"\n
                      \     echo \"-------------------------\"\n\n      if [ \"${bundle_id}\"
                      != \"\" ];then\n      echo \"executing revoke command\"\n        export
                      REVOKE=\"{\\\"ids\\\":[\\\"$bundle_id\\\"],\\\"confirmImpactedClustersIds\\\":[]}\"\n
                      \       curl -k -X PATCH -u \"admin:$PASSWORD\" -H \"Content-Type:
                      application/json\" --data $REVOKE https://central/v1/cluster-init/init-bundles/revoke\n
                      \     fi\n\n      printf '.'\n      attempt_counter=$(($attempt_counter+1))\n
                      \     echo \"Made create bundle attempt $attempt_counter, waiting...\"\n
                      \     sleep 5\n  done\n\n  echo \"Bundle received\"\n\n  if
                      [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n      BASE='base64
                      -w 0'\n  elif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n      BASE='base64'\n
                      \ fi\n\n  echo \"Applying bundle\"\n  # No jq in container,
                      python to the rescue\n  cat /tmp/bundle.json | python3 -c \"import
                      sys, json; print(json.load(sys.stdin)['kubectlBundle'])\" |
                      ${BASE} -d | oc apply -f -\n  ACS_HOST=\"$(oc get route central
                      -o custom-columns=HOST:.spec.host --no-headers):443\"\n  oc
                      patch secret sensor-tls --type='json' -p=\"[{\\\"op\\\" : \\\"add\\\",
                      \\\"path\\\" : \\\"/data/acs-host\\\", \\\"value\\\" : \\\"$(echo
                      $ACS_HOST | ${BASE})\\\"}]\"\n  echo \"ACS Cluster init bundle
                      generated and applied\"\nfi\n"
                    env:
                    - name: PASSWORD
                      valueFrom:
                        secretKeyRef:
                          key: password
                          name: central-htpasswd
                    image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                    imagePullPolicy: Always
                    name: create-cluster-init-bundle
                  dnsPolicy: ClusterFirst
                  restartPolicy: Never
                  serviceAccount: create-cluster-init
                  serviceAccountName: create-cluster-init
                  terminationGracePeriodSeconds: 30
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-ca-bundle6
      spec:
        object-templates:
        - complianceType: mustnothave
          objectDefinition:
            apiVersion: batch/v1
            kind: Job
            metadata:
              name: create-cluster-init-bundle
              namespace: stackrox
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: SC System and Communications Protection
    policy.open-cluster-management.io/controls: SC-8 Transmission Confidentiality
      and Integrity
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-acs-central-ca-bundle-expired
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: NonCompliant
    kind: Policy
    name: policy-acs-monitor-certs
    namespace: policies
  disabled: false
  policy-templates:
  - ignorePending: true
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-ca-bundle-expired
      spec:
        evaluationInterval:
          compliant: 1m
          noncompliant: 45s
        object-templates:
        - complianceType: mustnothave
          objectDefinition:
            apiVersion: v1
            kind: Secret
            metadata:
              name: sensor-tls
              namespace: stackrox
        remediationAction: enforce
        severity: medium
  - ignorePending: true
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-ca-bundle-expired2
      spec:
        evaluationInterval:
          compliant: 1m
          noncompliant: 45s
        object-templates:
        - complianceType: mustnothave
          objectDefinition:
            apiVersion: v1
            kind: Secret
            metadata:
              name: collector-tls
              namespace: stackrox
        remediationAction: enforce
        severity: medium
  - ignorePending: true
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-ca-bundle-expired3
      spec:
        evaluationInterval:
          compliant: 1m
          noncompliant: 45s
        object-templates:
        - complianceType: mustnothave
          objectDefinition:
            apiVersion: v1
            kind: Secret
            metadata:
              name: admission-control-tls
              namespace: stackrox
        remediationAction: enforce
        severity: medium
  - ignorePending: true
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-ca-bundle-expired4
      spec:
        evaluationInterval:
          compliant: 1m
          noncompliant: 45s
        object-templates:
        - complianceType: mustnothave
          objectDefinition:
            apiVersion: batch/v1
            kind: Job
            metadata:
              annotations:
                argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
                argocd.argoproj.io/sync-wave: "2"
              labels:
                init-bundle: central
              name: create-cluster-init-bundle-v2
              namespace: stackrox
            spec:
              template:
                metadata:
                  annotations:
                    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
                  labels:
                    init-bundle: central
                spec:
                  containers:
                  - command:
                    - /bin/bash
                    - -c
                    - "#!/usr/bin/env bash\nif kubectl get secret/sensor-tls &> /dev/null;
                      then\n  echo \"cluster-init bundle has already been configured,
                      doing nothing\"\n  exit 0\nelse\n\n  # Wait for central to be
                      ready\n  attempt_counter=0\n  max_attempts=20\n  echo \"Waiting
                      for central to be available...\"\n  until $(curl -k --output
                      /dev/null --silent --head --fail https://central); do\n      if
                      [ ${attempt_counter} -eq ${max_attempts} ];then\n        echo
                      \"Max attempts reached\"\n        exit 1\n      fi\n\n      printf
                      '.'\n      attempt_counter=$(($attempt_counter+1))\n      echo
                      \"Made attempt $attempt_counter, waiting...\"\n      sleep 5\n
                      \ done\n\n  # attempt to create init-bundle\n  # on failure
                      attempt to delete the bundle\n  attempt_counter=0\n  max_attempts=5\n
                      \ echo \"Configuring cluster-init bundle\"\n  \n  # set the
                      bundle name to include todays date\n  bundle_name=local-cluster-$(date
                      '+%Y%m%d')\n  export DATA={\\\"name\\\":\\\"$bundle_name\\\"}\n
                      \ until (curl -k -o /tmp/bundle.json -X POST -u \"admin:$PASSWORD\"
                      -H \"Content-Type: application/json\" --data $DATA --fail https://central/v1/cluster-init/init-bundles);
                      do\n      if [ ${attempt_counter} -eq ${max_attempts} ];then\n
                      \       echo \"Max attempts to create bundle reached\"\n        exit
                      1\n      fi\n\n      echo \"Check to see if there is an existing
                      bundle that can be revoked\"\n      curl -o /tmp/find_bundle.json
                      \ -k -X GET -u \"admin:$PASSWORD\" -H \"Content-Type: application/json\"
                      https://central/v1/cluster-init/init-bundles\n      bundle_id=$(cat
                      /tmp/find_bundle.json | python -c \"import sys, json; result
                      = [x for x in json.load(sys.stdin)[\\\"items\\\"] if x[\\\"name\\\"]==\\\"$bundle_name\\\"];
                      print(result[0][\\\"id\\\"])\")\n\n      echo \"-------------------------\"\n
                      \     echo \"bundle name is $bundle_name bundle id $bundle_id\"\n
                      \     echo \"-------------------------\"\n\n      if [ \"${bundle_id}\"
                      != \"\" ];then\n      echo \"executing revoke command\"\n        export
                      REVOKE=\"{\\\"ids\\\":[\\\"$bundle_id\\\"],\\\"confirmImpactedClustersIds\\\":[]}\"\n
                      \       curl -k -X PATCH -u \"admin:$PASSWORD\" -H \"Content-Type:
                      application/json\" --data $REVOKE https://central/v1/cluster-init/init-bundles/revoke\n
                      \     fi\n\n      printf '.'\n      attempt_counter=$(($attempt_counter+1))\n
                      \     echo \"Made create bundle attempt $attempt_counter, waiting...\"\n
                      \     sleep 5\n  done\n\n  echo \"Bundle received\"\n\n  if
                      [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n      BASE='base64
                      -w 0'\n  elif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n      BASE='base64'\n
                      \ fi\n\n  echo \"Applying bundle\"\n  # No jq in container,
                      python to the rescue\n  cat /tmp/bundle.json | python3 -c \"import
                      sys, json; print(json.load(sys.stdin)['kubectlBundle'])\" |
                      ${BASE} -d | oc apply -f -\n  ACS_HOST=\"$(oc get route central
                      -o custom-columns=HOST:.spec.host --no-headers):443\"\n  oc
                      patch secret sensor-tls --type='json' -p=\"[{\\\"op\\\" : \\\"add\\\",
                      \\\"path\\\" : \\\"/data/acs-host\\\", \\\"value\\\" : \\\"$(echo
                      $ACS_HOST | ${BASE})\\\"}]\"\n  echo \"ACS Cluster init bundle
                      generated and applied\"\nfi\n"
                    env:
                    - name: PASSWORD
                      valueFrom:
                        secretKeyRef:
                          key: password
                          name: central-htpasswd
                    image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                    imagePullPolicy: Always
                    name: create-cluster-init-bundle
                  dnsPolicy: ClusterFirst
                  restartPolicy: Never
                  serviceAccount: create-cluster-init
                  serviceAccountName: create-cluster-init
                  terminationGracePeriodSeconds: 30
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: SI System and Information Integrity
    policy.open-cluster-management.io/controls: SI-5 Security Alerts Advisories and
      Directives
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-acs-central-status
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-acs-operator-central
    namespace: policies
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-status
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: central
              namespace: stackrox
            status:
              conditions:
              - status: "True"
                type: Available
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: central-db
              namespace: stackrox
            status:
              conditions:
              - status: "True"
                type: Available
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: scanner-db
              namespace: stackrox
            status:
              conditions:
              - status: "True"
                type: Available
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: scanner
              namespace: stackrox
            status:
              conditions:
              - status: "True"
                type: Available
        remediationAction: inform
        severity: medium
  remediationAction: inform
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: SC System and Communications Protection
    policy.open-cluster-management.io/controls: SC-8 Transmission Confidentiality
      and Integrity
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-acs-monitor-certs
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-acs-central-ca-bundle
    namespace: policies
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: CertificatePolicy
      metadata:
        name: acs-bundle-certificates
      spec:
        minimumDuration: 720h
        namespaceSelector:
          include:
          - policies
        remediationAction: inform
        severity: high
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-monitor-certs2
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Secret
            metadata:
              name: sensor-tls
              namespace: stackrox
        remediationAction: inform
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-monitor-certs3
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Secret
            metadata:
              name: collector-tls
              namespace: stackrox
        remediationAction: inform
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-monitor-certs4
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Secret
            metadata:
              name: admission-control-tls
              namespace: stackrox
        remediationAction: inform
        severity: medium
  remediationAction: inform
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: SC System and Communications Protection
    policy.open-cluster-management.io/controls: SC-1 Policy and Procedures
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-acs-operator-central
  namespace: policies
spec:
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1beta1
      kind: OperatorPolicy
      metadata:
        name: operatorpolicy-rhacs-operator
      spec:
        complianceType: musthave
        operatorGroup:
          name: rhacs-operator-group
          namespace: rhacs-operator
        remediationAction: enforce
        severity: high
        subscription:
          channel: stable
          name: rhacs-operator
          namespace: rhacs-operator
          source: redhat-operators
          sourceNamespace: openshift-marketplace
        upgradeApproval: Automatic
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-operator-central
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: stackrox
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: rhacs-operator
        - complianceType: musthave
          objectDefinition:
            apiVersion: platform.stackrox.io/v1alpha1
            kind: Central
            metadata:
              name: stackrox-central-services
              namespace: stackrox
            spec:
              central:
                exposure:
                  loadBalancer:
                    enabled: false
                    port: 443
                  nodePort:
                    enabled: false
                  route:
                    enabled: true
                persistence:
                  persistentVolumeClaim:
                    claimName: stackrox-db
              egress:
                connectivityPolicy: Online
              scanner:
                analyzer:
                  scaling:
                    autoScaling: Enabled
                    maxReplicas: 5
                    minReplicas: 2
                    replicas: 2
                scannerComponent: Enabled
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: SI System and Information Integrity
    policy.open-cluster-management.io/controls: SI-5 Security Alerts Advisories and
      Directives
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-acs-sync-resources
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-acs-central-ca-bundle
    namespace: policies
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-sync-resources
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: platform.stackrox.io/v1alpha1
            kind: SecuredCluster
            metadata:
              name: stackrox-secured-cluster-services
              namespace: stackrox
            spec:
              admissionControl:
                listenOnCreates: false
                listenOnEvents: true
                listenOnUpdates: false
              auditLogs:
                collection: Auto
              centralEndpoint: |
                {{ fromSecret "stackrox" "sensor-tls" "acs-host" | base64dec }}
              clusterName: |
                {{ fromSecret "open-cluster-management-agent" "hub-kubeconfig-secret" "cluster-name" | base64dec }}
              perNode:
                collector:
                  collection: CORE_BPF
                  imageFlavor: Regular
                taintToleration: TolerateTaints
              scanner:
                scannerComponent: Disabled
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-sync-resources2
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            data:
              admission-control-cert.pem: '{{ fromSecret "stackrox" "admission-control-tls"
                "admission-control-cert.pem" }}'
              admission-control-key.pem: '{{ fromSecret "stackrox" "admission-control-tls"
                "admission-control-key.pem" }}'
              ca.pem: '{{ fromSecret "stackrox" "admission-control-tls" "ca.pem" }}'
            kind: Secret
            metadata:
              labels:
                certificate_key_name: admission-control-cert.pem
              name: admission-control-tls
              namespace: policies
            type: Opaque
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-sync-resources3
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            data:
              ca.pem: '{{ fromSecret "stackrox" "collector-tls" "ca.pem" }}'
              collector-cert.pem: '{{ fromSecret "stackrox" "collector-tls" "collector-cert.pem"
                }}'
              collector-key.pem: '{{ fromSecret "stackrox" "collector-tls" "collector-key.pem"
                }}'
            kind: Secret
            metadata:
              labels:
                certificate_key_name: collector-cert.pem
              name: collector-tls
              namespace: policies
            type: Opaque
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-sync-resources4
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            data:
              acs-host: '{{ fromSecret "stackrox" "sensor-tls" "acs-host" }}'
              ca.pem: '{{ fromSecret "stackrox" "sensor-tls" "ca.pem" }}'
              sensor-cert.pem: '{{ fromSecret "stackrox" "sensor-tls" "sensor-cert.pem"
                }}'
              sensor-key.pem: '{{ fromSecret "stackrox" "sensor-tls" "sensor-key.pem"
                }}'
            kind: Secret
            metadata:
              labels:
                certificate_key_name: sensor-cert.pem
              name: sensor-tls
              namespace: policies
            type: Opaque
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-sync-resources5
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: console.openshift.io/v1
            kind: ConsoleLink
            metadata:
              name: acs
            spec:
              applicationMenu:
                imageURL: https://upload.wikimedia.org/wikipedia/commons/3/3a/OpenShift-LogoType.svg
                section: Red Hat applications
              href: https://{{ (lookup "route.openshift.io/v1" "Route" "stackrox"
                "central").spec.host }}
              location: ApplicationMenu
              text: Red Hat Advanced Cluster Security for Kubernetes
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: SI System and Information Integrity
    policy.open-cluster-management.io/controls: SI-5 Security Alerts Advisories and
      Directives
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-advanced-managed-cluster-security
  namespace: policies
spec:
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-advanced-managed-cluster-security
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: stackrox
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-advanced-managed-cluster-security2
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: rhacs-operator
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1beta1
      kind: OperatorPolicy
      metadata:
        name: operatorpolicy-rhacs-operator
      spec:
        complianceType: musthave
        operatorGroup:
          name: rhacs-operator-group
          namespace: rhacs-operator
        remediationAction: enforce
        severity: high
        subscription:
          channel: stable
          name: rhacs-operator
          namespace: rhacs-operator
          source: redhat-operators
          sourceNamespace: openshift-marketplace
        upgradeApproval: Automatic
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-advanced-managed-cluster-security4
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            data:
              admission-control-cert.pem: '{{hub fromSecret "policies" "admission-control-tls"
                "admission-control-cert.pem" hub}}'
              admission-control-key.pem: '{{hub fromSecret "policies" "admission-control-tls"
                "admission-control-key.pem" hub}}'
              ca.pem: '{{hub fromSecret "policies" "admission-control-tls" "ca.pem"
                hub}}'
            kind: Secret
            metadata:
              name: admission-control-tls
              namespace: stackrox
            type: Opaque
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-advanced-managed-cluster-security5
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            data:
              ca.pem: '{{hub fromSecret "policies" "collector-tls" "ca.pem" hub}}'
              collector-cert.pem: '{{hub fromSecret "policies" "collector-tls" "collector-cert.pem"
                hub}}'
              collector-key.pem: '{{hub fromSecret "policies" "collector-tls" "collector-key.pem"
                hub}}'
            kind: Secret
            metadata:
              name: collector-tls
              namespace: stackrox
            type: Opaque
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-advanced-managed-cluster-security6
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            data:
              acs-host: '{{hub fromSecret "policies" "sensor-tls" "acs-host" hub}}'
              ca.pem: '{{hub fromSecret "policies" "sensor-tls" "ca.pem" hub}}'
              sensor-cert.pem: '{{hub fromSecret "policies" "sensor-tls" "sensor-cert.pem"
                hub}}'
              sensor-key.pem: '{{hub fromSecret "policies" "sensor-tls" "sensor-key.pem"
                hub}}'
            kind: Secret
            metadata:
              name: sensor-tls
              namespace: stackrox
            type: Opaque
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-advanced-managed-cluster-security7
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: platform.stackrox.io/v1alpha1
            kind: SecuredCluster
            metadata:
              name: stackrox-secured-cluster-services
              namespace: stackrox
            spec:
              admissionControl:
                listenOnCreates: false
                listenOnEvents: true
                listenOnUpdates: false
              auditLogs:
                collection: Auto
              centralEndpoint: |
                {{ fromSecret "stackrox" "sensor-tls" "acs-host" | base64dec }}
              clusterName: |
                {{ fromSecret "open-cluster-management-agent" "hub-kubeconfig-secret" "cluster-name" | base64dec }}
              perNode:
                collector:
                  collection: CORE_BPF
                  imageFlavor: Regular
                taintToleration: TolerateTaints
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: SI System and Information Integrity
    policy.open-cluster-management.io/controls: SI-5 Security Alerts Advisories and
      Directives
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-advanced-managed-cluster-status
  namespace: policies
spec:
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-advanced-managed-cluster-status
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: sensor
              namespace: stackrox
            status:
              conditions:
              - status: "True"
                type: Available
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: DaemonSet
            metadata:
              name: collector
              namespace: stackrox
            status:
              numberMisscheduled: 0
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: admission-control
              namespace: stackrox
            status:
              conditions:
              - status: "True"
                type: Available
        remediationAction: inform
        severity: medium
  remediationAction: inform
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: CA Security Assessment and Authorization
    policy.open-cluster-management.io/controls: CA-2 Security Assessments,CA-7 Continuous
      Monitoring
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-compliance-operator-install
  namespace: policies
spec:
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1beta1
      kind: OperatorPolicy
      metadata:
        name: operatorpolicy-comp-operator
      spec:
        complianceType: musthave
        operatorGroup:
          name: compliance-operator
          namespace: openshift-compliance
          targetNamespaces:
          - openshift-compliance
        remediationAction: enforce
        severity: high
        subscription:
          channel: stable
          name: compliance-operator
          namespace: openshift-compliance
          source: redhat-operators
          sourceNamespace: openshift-marketplace
        upgradeApproval: Automatic
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-compliance-operator-install
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: openshift-compliance
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: SI System and Information Integrity
    policy.open-cluster-management.io/controls: SI-7 Software Firmware and Information
      Integrity
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-config-quay
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-install-quay
    namespace: policies
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-config-quay
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            data:
              host: '{{ (lookup "route.openshift.io/v1" "Route" "openshift-quay" "registry-quay"
                ).spec.host }}'
            kind: ConfigMap
            metadata:
              name: quay-config
              namespace: policies
        - complianceType: musthave
          objectDefinition:
            apiVersion: console.openshift.io/v1
            kind: ConsoleLink
            metadata:
              name: quay
            spec:
              applicationMenu:
                imageURL: https://upload.wikimedia.org/wikipedia/commons/3/3a/OpenShift-LogoType.svg
                section: Red Hat applications
              href: https://{{ (lookup "route.openshift.io/v1" "Route" "openshift-quay"
                "registry-quay" ).spec.host }}
              location: ApplicationMenu
              text: Red Hat Quay Enterprise Registry
        - complianceType: musthave
          objectDefinition:
            apiVersion: batch/v1
            kind: Job
            metadata:
              name: create-admin-user
              namespace: openshift-quay
            spec:
              template:
                spec:
                  containers:
                  - command:
                    - /bin/bash
                    - -c
                    - |
                      #!/usr/bin/env bash

                      function quay_cmd() {
                        DATA='{}'
                        if [ ! -z "$4" ]; then
                          DATA=$4
                        fi
                        echo "[$1] $2 $3 --data $DATA" 1>&2
                        AUTH="Fake: dummy"
                        if [ $1 = "Basic" ]; then
                          COUNT=$(oc -n $QUAY_NAMESPACE get --ignore-not-found=true secret $QUAY_USER_SECRET | wc -l)
                          if [ $COUNT -gt 1 ]; then
                              BASIC=$(oc -n $QUAY_NAMESPACE extract secret/$QUAY_USER_SECRET --keys=basic --to=-)
                          fi
                          AUTH="Authorization: Basic $BASIC"

                        elif [ $1 = "Bearer" ]; then
                          AUTH="Authorization: Bearer $TOKEN"
                        fi
                        curl -X $2 $CURL_OPTS -H 'Content-Type: application/json'  -H "$AUTH" https://$QUAY_HOST$3 --data "$DATA"
                        echo "[INFO] Success" 1>&2
                      }
                      echo -n "Waiting for the Quay Registry CR to be available ."
                      RC=$(oc wait QuayRegistry -n openshift-quay registry --for=condition=Available=true > /dev/null 2>&1;echo $?)

                      while [ $RC -ne 0 ]; do
                        sleep 2
                        echo -n "."
                        RC=$(oc wait QuayRegistry -n openshift-quay registry --for=condition=Available=true > /dev/null 2>&1;echo $?)
                      done
                      echo "done"

                      CURL_OPTS="-fsk"
                      QUAY_ADMIN=quayadmin
                      QUAY_USER=quaydevel
                      QUAY_USER_SECRET=$QUAY_USER
                      QUAY_NAMESPACE=openshift-quay
                      QUAY_HOST=$(oc get route -n $QUAY_NAMESPACE registry-quay -o jsonpath='{.spec.host}')
                      QUAY_ORG=devel
                      QUAY_ORG_EMAIL=devel@myorg.com
                      QUAY_REPO=example
                      if [ $? -ne 0 ]; then
                        echo "Quay route does not exist yet, please wait and try again."
                        exit 1
                      fi
                      RESULT=$(oc get secret -n $QUAY_NAMESPACE $QUAY_USER_SECRET)
                      if [ $? -eq 0 ]; then
                        echo "Quay user configuration secret already exists: $QUAY_USER_SECRET in namespace $QUAY_NAMESPACE"
                        exit 1
                      fi

                      ADMINPASS=`head -c 8 /dev/urandom | base64 | sed 's/=//'`
                      BASE64AUTH=`echo -n $QUAY_USER:$QUAY_PASSWORD | base64 -w0`
                      RESULT=$(curl -X POST -k -s https://$QUAY_HOST/api/v1/user/initialize --header 'Content-Type: application/json' --data "{ \"username\": \"quayadmin\", \"password\":\"${ADMINPASS}\", \"email\": \"quayadmin@example.com\", \"access_token\": true}")
                      echo "$RESULT" | grep -q "non-empty database"
                      if [ $? -eq 0 ]; then
                        echo "Quay user configuration failed, the database has been initialized."
                        exit 1
                      else
                        echo "[INFO] Destroy any previous secrets ..."
                        oc -n $QUAY_NAMESPACE delete --ignore-not-found=true secret $QUAY_USER_SECRET

                        echo "[INFO] Creating quay admin secret quayadmin ..."
                        TOKEN=$(echo "$RESULT" | tr ',' '\n' | grep access_token | awk -F: '{print $2}' | sed 's/"//g')
                        oc -n $QUAY_NAMESPACE create secret generic quayadmin --from-literal=token=$TOKEN --from-literal=password=$ADMINPASS --from-literal=basic="$BASE64AUTH"

                        echo "[INFO] Creating $QUAY_USER user ..."
                        RESPONSE=$(quay_cmd Bearer POST /api/v1/superuser/users/ "{ \"username\": \"$QUAY_USER\", \"email\": \"$QUAY_USER_EMAIL\", \"access_token\": true}")

                        QUAY_PASSWORD=$(echo $RESPONSE | tr ',' '\n' | grep '"password"' | cut -d \" -f 4)
                        BASE64AUTH=`echo -n $QUAY_USER:$QUAY_PASSWORD | base64 -w0`

                        echo "[INFO] Creating $QUAY_USER_SECRET secret ..."
                        oc -n $QUAY_NAMESPACE create secret generic $QUAY_USER_SECRET --from-literal=password="$QUAY_PASSWORD" --from-literal=basic="$BASE64AUTH"

                        echo "[INFO] Creating quay-pull-secret ..."
                        echo -e "{ \"auths\": { \"$QUAY_HOST\": { \"auth\": \"$BASE64AUTH\" } }}" | oc -n $QUAY_NAMESPACE create secret generic quay-pull-secret --from-file=.dockerconfigjson=/dev/stdin --type=kubernetes.io/dockerconfigjson

                        echo "[INFO] Creating quay integration token secret ..."
                        oc -n $QUAY_NAMESPACE create secret generic quay-integration --from-literal=token=$TOKEN
                      fi

                      echo "[INFO] Looking for initial organization ..."
                      COUNT=$(quay_cmd Bearer GET /api/v1/organization/$QUAY_ORG | grep -v not_found | wc -l)
                      if [ $COUNT = 0 ]; then
                        echo "[INFO] Creating $QUAY_ORG org ..."
                        # Email cannot be shared with the initial user
                        quay_cmd Bearer POST /api/v1/organization/ "{\"name\": \"$QUAY_ORG\", \"email\": \"$QUAY_ORG_EMAIL\" }"
                        quay_cmd Basic GET /api/v1/organization/$QUAY_ORG
                      fi

                      echo "[INFO] Looking for org application ..."
                      # The only way to get another OAuth token is to go to: Organization -> Applications -> {app} -> Generate Token
                      # If there was a programatic way to do it here, we could avoid the problem with the bearer token expiring after 150min
                      APPLICATION=automation
                      COUNT=$(quay_cmd Bearer GET /api/v1/organization/$QUAY_ORG/applications | grep $APPLICATION | wc -l)
                      if [ $COUNT = 0 ]; then
                        echo "[INFO] Creating $APPLICATION application..."
                        quay_cmd Bearer POST /api/v1/organization/$QUAY_ORG/applications "{\"name\": \"$QUAY_ORG-automation\", \"description\": \"automation app\" }"
                      fi

                      echo "[INFO] Looking for initial repo ..."
                      COUNT=$(quay_cmd Bearer GET /api/v1/repository/$QUAY_ORG/$QUAY_REPO | grep -v not_found | wc -l)
                      if [ $COUNT = 0 ]; then
                        echo "[INFO] Creating $QUAY_REPO repo..."
                        quay_cmd Bearer POST /api/v1/repository "{\"namespace\":\"$QUAY_ORG\", \"repository\":\"$QUAY_REPO\", \"visibility\":\"public\", \"description\":\"Development Repo\", \"repo_kind\":\"image\"}"
                      fi

                      echo "[INFO] Looking for $QUAY_ORG members ..."
                      COUNT=$(quay_cmd Bearer GET /api/v1/organization/$QUAY_ORG/team/owners/members | grep "name\": \"$QUAY_USER\"" | wc -l)
                      if [ $COUNT = 0 ]; then
                        echo "[INFO] Associating $QUAY_USER with $QUAY_ORG ..."
                        quay_cmd Bearer PUT /api/v1/organization/$QUAY_ORG/team/owners/members/$QUAY_USER '{}'
                      fi

                      echo "[INFO] Looking for $QUAY_REPO admins ..."
                      COUNT=$(quay_cmd Bearer GET /api/v1/repository/$QUAY_ORG/$QUAY_REPO/permissions/user/$QUAY_USER | grep '"role": "admin"' | wc -l)
                      if [ $COUNT = 0 ]; then
                        echo "[INFO] Give $QUAY_USER admin rights to the repo ..."
                        quay_cmd Bearer PUT /api/v1/repository/$QUAY_ORG/$QUAY_REPO/permissions/user/$QUAY_USER '{ "role": "admin"}'
                      fi

                      echo "[INFO] Job finished"
                    image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                    imagePullPolicy: Always
                    name: create-admin-user
                  dnsPolicy: ClusterFirst
                  restartPolicy: Never
                  serviceAccount: create-admin-user
                  serviceAccountName: create-admin-user
                  terminationGracePeriodSeconds: 30
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: SI System and Information Integrity
    policy.open-cluster-management.io/controls: SI-7 Software Firmware and Information
      Integrity
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-install-quay
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-odf-status
    namespace: policies
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1beta1
      kind: OperatorPolicy
      metadata:
        labels:
          operators.coreos.com/quay-operator.openshift-quay: ""
        name: operatorpolicy-quay-operator
      spec:
        complianceType: musthave
        operatorGroup:
          name: openshift-quay
          namespace: openshift-quay
          targetNamespaces:
          - openshift-quay
        remediationAction: enforce
        severity: high
        subscription:
          name: quay-operator
          namespace: openshift-quay
          source: redhat-operators
          sourceNamespace: openshift-marketplace
        upgradeApproval: Automatic
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-install-quay
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Namespace
            metadata:
              labels:
                openshift.io/cluster-monitoring: "true"
              name: openshift-quay
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: create-admin-user
              namespace: openshift-quay
        - complianceType: musthave
          objectDefinition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: Role
            metadata:
              name: create-admin-user
              namespace: openshift-quay
            rules:
            - apiGroups:
              - ""
              resources:
              - secrets
              verbs:
              - get
              - list
              - create
              - patch
              - update
              - delete
            - apiGroups:
              - route.openshift.io
              resources:
              - routes
              verbs:
              - get
              - list
            - apiGroups:
              - quay.redhat.com
              resources:
              - quayregistries
              verbs:
              - get
              - list
              - watch
        - complianceType: musthave
          objectDefinition:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: RoleBinding
            metadata:
              name: create-admin-user
              namespace: openshift-quay
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: Role
              name: create-admin-user
            subjects:
            - kind: ServiceAccount
              name: create-admin-user
              namespace: openshift-quay
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            data:
              config.yaml: RkVBVFVSRV9VU0VSX0lOSVRJQUxJWkU6IHRydWUKQlJPV1NFUl9BUElfQ0FMTFNfWEhSX09OTFk6IGZhbHNlClNVUEVSX1VTRVJTOgotIHF1YXlhZG1pbgpGRUFUVVJFX1VTRVJfQ1JFQVRJT046IHRydWUKRkVBVFVSRV9TVVBFUlVTRVJTX0ZVTExfQUNDRVNTOiB0cnVlCg==
            kind: Secret
            metadata:
              name: init-config-bundle-secret
              namespace: openshift-quay
            type: Opaque
        - complianceType: musthave
          objectDefinition:
            apiVersion: quay.redhat.com/v1
            kind: QuayRegistry
            metadata:
              name: registry
              namespace: openshift-quay
            spec:
              components:
              - kind: objectstorage
                managed: true
              - kind: tls
                managed: true
              configBundleSecret: init-config-bundle-secret
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: CA Assessment Authorization and
      Monitoring
    policy.open-cluster-management.io/controls: CA-7 Continuous Monitoring
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-observability-operator
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-observability-storage
    namespace: policies
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: thanos-secret
      spec:
        object-templates-raw: "{{- /* read the bucket data and noobaa endpoint access
          data */ -}}\n{{- $objBucket := (lookup \"objectbucket.io/v1alpha1\" \"ObjectBucket\"
          \"\" \"obc-openshift-storage-obc-observability\") }}\n{{- $awsAccess :=
          (lookup \"v1\" \"Secret\" \"openshift-storage\" \"noobaa-admin\") }}\n{{-
          /* create the thanos config file as a template */ -}}\n{{- $thanosConfig
          := `\ntype: s3\nconfig:\n  bucket: %[1]s\n  endpoint: %[2]s\n  insecure:
          true\n  access_key: %[3]s\n  secret_key: %[4]s`\n}}\n\n{{- /* create the
          secret using the thanos configuration template created above. */ -}}\n-
          complianceType: mustonlyhave\n  objectDefinition:\n    apiVersion: v1\n
          \   kind: Secret\n    metadata:\n      name: thanos-object-storage\n      namespace:
          open-cluster-management-observability\n    type: Opaque\n    data:\n      thanos.yaml:
          {{ (printf $thanosConfig $objBucket.spec.endpoint.bucketName \n                                            $objBucket.spec.endpoint.bucketHost
          \n                                            ($awsAccess.data.AWS_ACCESS_KEY_ID
          | base64dec) \n                                            ($awsAccess.data.AWS_SECRET_ACCESS_KEY
          | base64dec)\n                      ) | base64enc }}\n"
        remediationAction: enforce
        severity: high
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-observability-operator2
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            data:
              .dockerconfigjson: '{{- if eq (lookup "v1" "Secret" "open-cluster-management"
                "multiclusterhub-operator-pull-secret").kind "Secret" -}} {{- fromSecret
                "open-cluster-management" "multiclusterhub-operator-pull-secret" ".dockerconfigjson"
                -}} {{- else -}} {{- fromSecret "openshift-config" "pull-secret" ".dockerconfigjson"
                -}} {{- end -}}'
            kind: Secret
            metadata:
              name: multiclusterhub-operator-pull-secret
              namespace: open-cluster-management-observability
            type: kubernetes.io/dockerconfigjson
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-observability-operator3
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: observability.open-cluster-management.io/v1beta2
            kind: MultiClusterObservability
            metadata:
              name: observability
            spec:
              observabilityAddonSpec: {}
              storageConfig:
                metricObjectStorage:
                  key: thanos.yaml
                  name: thanos-object-storage
        remediationAction: enforce
        severity: medium
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-observability-operator4
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: console.openshift.io/v1
            kind: ConsoleLink
            metadata:
              name: observability
            spec:
              applicationMenu:
                imageURL: https://upload.wikimedia.org/wikipedia/commons/3/3a/OpenShift-LogoType.svg
                section: Red Hat applications
              href: https://{{ (lookup "route.openshift.io/v1" "Route" "open-cluster-management-observability"
                "grafana").spec.host }}
              location: ApplicationMenu
              text: Red Hat Advanced Cluster Management Observability
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: CA Assessment Authorization and
      Monitoring
    policy.open-cluster-management.io/controls: CA-7 Continuous Monitoring
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-observability-storage
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-odf-status
    namespace: policies
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-observability-storage
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: objectbucket.io/v1alpha1
            kind: ObjectBucketClaim
            metadata:
              name: obc-observability
              namespace: openshift-storage
            spec:
              generateBucketName: obc-observability-bucket
              storageClassName: ocs-storagecluster-ceph-rgw
            status:
              phase: Bound
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: SI System and Information Integrity
    policy.open-cluster-management.io/controls: SI-7 Software Firmware and Information
      Integrity
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-odf
  namespace: policies
spec:
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1beta1
      kind: OperatorPolicy
      metadata:
        name: operatorpolicy-local-storage-operator
      spec:
        complianceType: musthave
        operatorGroup:
          name: openshift-local-storage
          namespace: openshift-local-storage
          targetNamespaces:
          - openshift-local-storage
        remediationAction: enforce
        severity: high
        subscription:
          name: local-storage-operator
          namespace: openshift-local-storage
          source: redhat-operators
          sourceNamespace: openshift-marketplace
        upgradeApproval: Automatic
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1beta1
      kind: OperatorPolicy
      metadata:
        name: operatorpolicy-odf-operator
      spec:
        complianceType: musthave
        operatorGroup:
          name: openshift-storage-operatorgroup
          namespace: openshift-storage
          targetNamespaces:
          - openshift-storage
        remediationAction: enforce
        severity: high
        subscription:
          name: odf-operator
          namespace: openshift-storage
          source: redhat-operators
          sourceNamespace: openshift-marketplace
        upgradeApproval: Automatic
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-odf
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: openshift-local-storage
        - complianceType: musthave
          objectDefinition:
            apiVersion: v1
            kind: Namespace
            metadata:
              labels:
                openshift.io/cluster-monitoring: "true"
              name: openshift-storage
        - complianceType: musthave
          objectDefinition:
            apiVersion: local.storage.openshift.io/v1alpha1
            kind: LocalVolumeDiscovery
            metadata:
              name: auto-discover-devices
              namespace: openshift-local-storage
            spec:
              nodeSelector:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: cluster.ocs.openshift.io/openshift-storage
                    operator: Exists
              tolerations:
              - effect: NoSchedule
                key: node-role.kubernetes.io/infra
                operator: Exists
        - complianceType: musthave
          objectDefinition:
            apiVersion: local.storage.openshift.io/v1alpha1
            kind: LocalVolumeSet
            metadata:
              name: odf-localvolumeset
              namespace: openshift-local-storage
            spec:
              deviceInclusionSpec:
                deviceTypes:
                - disk
                minSize: 1Ti
              maxDeviceCount: 1
              nodeSelector:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: cluster.ocs.openshift.io/openshift-storage
                    operator: Exists
              storageClassName: odf-localvolumeset
              tolerations:
              - effect: NoSchedule
                key: node-role.kubernetes.io/infra
                operator: Exists
              volumeMode: Block
            status:
              conditions:
              - status: "True"
                type: Available
        - complianceType: musthave
          objectDefinition:
            apiVersion: odf.openshift.io/v1alpha1
            kind: StorageSystem
            metadata:
              name: ocs-storagecluster-storagesystem
              namespace: openshift-storage
            spec:
              kind: storagecluster.ocs.openshift.io/v1
              name: ocs-storagecluster
              namespace: openshift-storage
        - complianceType: musthave
          objectDefinition:
            apiVersion: operator.openshift.io/v1
            kind: Console
            metadata:
              name: cluster
            spec:
              plugins:
              - odf-console
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: SI System and Information Integrity
    policy.open-cluster-management.io/controls: SI-7 Software Firmware and Information
      Integrity
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-odf-cluster
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-odf
    namespace: policies
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-odf-cluster
      spec:
        object-templates-raw: |
          - complianceType: musthave
            objectDefinition:
              apiVersion: ocs.openshift.io/v1
              kind: StorageCluster
              metadata:
                annotations:
                  uninstall.ocs.openshift.io/cleanup-policy: delete
                  uninstall.ocs.openshift.io/mode: graceful
                name: ocs-storagecluster
                namespace: openshift-storage
              spec:
                flexibleScaling: true
                monDataDirHostPath: /var/lib/rook
                storageDeviceSets:
                - count: 1
                  dataPVCTemplate:
                    spec:
                      accessModes:
                      - ReadWriteOnce
                      resources:
                        requests:
                          storage: 1Ti
                      storageClassName: odf-localvolumeset
                      volumeMode: Block
                  name: ocs-deviceset-localvolume
                  replica: 3
                placement:
                  all:
                    tolerations:
                    - effect: NoSchedule
                      operator: Exists
                      key: node-role.kubernetes.io/infra
                  mds:
                    tolerations:
                    - effect: NoSchedule
                      operator: Exists
                      key: node-role.kubernetes.io/infra
                  rgw:
                    tolerations:
                    - effect: NoSchedule
                      operator: Exists
                      key: node-role.kubernetes.io/infra
                  noobaa-core::
                    tolerations:
                    - effect: NoSchedule
                      operator: Exists
                      key: node-role.kubernetes.io/infra
        remediationAction: enforce
        severity: high
  remediationAction: enforce
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: SI System and Information Integrity
    policy.open-cluster-management.io/controls: SI-7 Software Firmware and Information
      Integrity
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-odf-status
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-odf
    namespace: policies
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-odf-status
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: noobaa-operator
              namespace: openshift-storage
            status:
              conditions:
              - status: "True"
                type: Available
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: ocs-operator
              namespace: openshift-storage
            status:
              conditions:
              - status: "True"
                type: Available
        - complianceType: musthave
          objectDefinition:
            apiVersion: ocs.openshift.io/v1
            kind: StorageCluster
            metadata:
              name: ocs-storagecluster
              namespace: openshift-storage
            status:
              phase: Ready
        - complianceType: musthave
          objectDefinition:
            apiVersion: noobaa.io/v1alpha1
            kind: NooBaa
            metadata:
              name: noobaa
              namespace: openshift-storage
            status:
              phase: Ready
        - complianceType: musthave
          objectDefinition:
            apiVersion: noobaa.io/v1alpha1
            kind: BackingStore
            metadata:
              name: noobaa-default-backing-store
              namespace: openshift-storage
            status:
              phase: Ready
        - complianceType: musthave
          objectDefinition:
            apiVersion: noobaa.io/v1alpha1
            kind: BucketClass
            metadata:
              name: noobaa-default-bucket-class
              namespace: openshift-storage
            status:
              phase: Ready
        remediationAction: inform
        severity: medium
  remediationAction: inform
---
apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    policy.open-cluster-management.io/categories: SI System and Information Integrity
    policy.open-cluster-management.io/controls: SI-7 Software Firmware and Information
      Integrity
    policy.open-cluster-management.io/description: ""
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: opp
  name: policy-quay-status
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: Compliant
    kind: Policy
    name: policy-install-quay
    namespace: policies
  disabled: false
  policy-templates:
  - objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-quay-status
      spec:
        object-templates:
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: registry-quay-app
              namespace: openshift-quay
            status:
              conditions:
              - status: "True"
                type: Available
        - complianceType: musthave
          objectDefinition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: registry-quay-database
              namespace: openshift-quay
            status:
              conditions:
              - status: "True"
                type: Available
        remediationAction: inform
        severity: medium
  remediationAction: inform
---
apiVersion: policy.open-cluster-management.io/v1beta1
kind: PolicySet
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
  labels:
    open-cluster-management.io/policy-set: opp
  name: opp-clusters
  namespace: policies
spec:
  description: The OpenShift Platform Plus policy set applies several policies that
    install the OpenShift Platform Plus products using best practices that allow them
    to work well together. This policy set is focused on the components that install
    to every managed cluster.
  policies:
  - policy-advanced-managed-cluster-security
  - policy-advanced-managed-cluster-status
  - policy-compliance-operator-install
---
apiVersion: policy.open-cluster-management.io/v1beta1
kind: PolicySet
metadata:
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
  labels:
    open-cluster-management.io/policy-set: opp
  name: opp-hub
  namespace: policies
spec:
  description: The OpenShift Platform Plus policy set applies several policies that
    will install the OpenShift Platform Plus products using best practices that allow
    them to work well together. This policy set is focused on the components that
    install to the Advanced Cluster Management hub.
  policies:
  - policy-acs-central-ca-bundle
  - policy-acs-central-ca-bundle-expired
  - policy-acs-central-status
  - policy-acs-monitor-certs
  - policy-acs-operator-central
  - policy-acs-sync-resources
  - policy-advanced-managed-cluster-status
  - policy-compliance-operator-install
  - policy-config-quay
  - policy-install-quay
  - policy-observability-operator
  - policy-observability-storage
  - policy-odf
  - policy-odf-cluster
  - policy-odf-status
  - policy-quay-status
